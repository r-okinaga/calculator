#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.13
# from Racc grammer file "".
#

require 'racc/parser.rb'


class Calcu < Racc::Parser

module_eval(<<'...end parse.y/module_eval...', 'parse.y', 42)

    def parse(str)
        @q = []
        until str.empty?
            case str
            when /\A\d+/
                @q.push [:value, $&.to_i]
            when /\A.|\n/o
                @q.push [$&, $&]
            end
            str = $'
        end
        @q.push [false, '$end']
        do_parse
    end

    def next_token
        @q.shift
    end

...end parse.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,     5,     7,     8,     9,    10,     4,     5,     4,     5,
     4,     5,     4,     5,     4,     5,     6,    12,    17 ]

racc_action_check = [
     0,     0,     2,     2,     3,     3,     5,     5,     7,     7,
     8,     8,     9,     9,    10,    10,     1,     6,    11 ]

racc_action_pointer = [
    -6,    16,     0,     0,   nil,     0,    17,     2,     4,     6,
     8,    10,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -9,    -9,    -1,    -4,    -7,    -9,    -9,    -9,    -9,    -9,
    -9,    -9,    18,    -2,    -3,    -5,    -6,    -8 ]

racc_goto_table = [
     1,    13,    14,    15,    16,    11 ]

racc_goto_check = [
     1,     2,     2,     3,     3,     1 ]

racc_goto_pointer = [
   nil,     0,    -6,    -6 ]

racc_goto_default = [
   nil,   nil,     2,     3 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 10, :_reduce_1,
  3, 10, :_reduce_2,
  3, 10, :_reduce_3,
  1, 11, :_reduce_4,
  3, 11, :_reduce_5,
  3, 11, :_reduce_6,
  1, 12, :_reduce_7,
  3, 12, :_reduce_8 ]

racc_reduce_n = 9

racc_shift_n = 18

racc_token_table = {
  false => 0,
  :error => 1,
  "+" => 2,
  "-" => 3,
  "*" => 4,
  "/" => 5,
  :value => 6,
  "(" => 7,
  ")" => 8 }

racc_nt_base = 9

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "value",
  "\"(\"",
  "\")\"",
  "$start",
  "expr",
  "term",
  "facter" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parse.y', 4)
  def _reduce_1(val, _values, result)
                    result = val[0]
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 8)
  def _reduce_2(val, _values, result)
                    result = val[0] + val[2]
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 12)
  def _reduce_3(val, _values, result)
                    result = val[0] - val[2]
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 17)
  def _reduce_4(val, _values, result)
                    result = val[0]
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 22)
  def _reduce_5(val, _values, result)
                    result = val[0] * val[2]
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 27)
  def _reduce_6(val, _values, result)
                    result = val[0] / val[2]
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 32)
  def _reduce_7(val, _values, result)
                    result = val[0].to_i
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 36)
  def _reduce_8(val, _values, result)
                    result = val[1]
            
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Calcu


    parser = Calcu.new
    puts "input"
        print '? '
        str = gets.chop!
        puts parser.parse(str)
